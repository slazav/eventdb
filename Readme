Вторая попытка написать базу данных о походах на berkleydb.

======================================================================

    Архитектура

suid-программа, которая стоит на сервере и от моего имени выполняет разные
действия. Управляется перловым cgi-скриптом. Через аргументы ей
передается название команды и ее параметры. Затем на stdin - секретная
строчка. На stdout выдается результат в формате json. Информация хранится
в berkleydb (ключ - строка или число, значение - json).

Для работы с базой данных используется библиотека berkleydb, Для работы с json -
библиотека jansson. Используются две самодельные библиотеки:
- jsonxx - C++ обертка для jansson (в интернете можно найти готовую обертку,
но мне она понравилась гораздо меньше)
- jsondb - C++ библиотека для базы данных с json-значениями. Самое мощное тут -
экстрактор полей, позволяющий строить индексы по разным полям внутри json'а.

TODO: такое надо бы, конечно, делать в виде сервера...

======================================================================

    База данных пользователей

Авторизация происходит только через сервис loginza.ru. Для тестовых целей
предусмотрена эмуляция (см конфигурационный файл и тестовый скрипт).

База данных
identity -> {identity, alias, level, fill_name, provider, session, stime}

identity - уникальный url, (например, http://slazav.livejournal.org),
level    - уровень доступа (-1,0,1,2,3),
alias    - уникальный alias (например, slazav),
provider  - короткое название соцсети-провайдера (lj, fb, vk, google, yandex)
fill_name - полное имя пользователя в соцсети (обновляется при каждом входе)
session  - идентификатор сессии, по которому предоставляется доступ
stime    - время последнего логина/логаута

Первый новый пользователь получает уровень LEVEL_ADMIN, все остальные -- LEVEL_NORM.
Соответственно,
LEVEL_ANON=-1 -- забаненный пользователь, те же права, что у анонима,
LEVEL_NORM=0  -- обычный,
LEVEL_MODER=1 -- модератор,
LEVEL_ADMIN=2 -- администратор,
LEVEL_SUPER=3 - самый главный (единственный) пользователь.

Пользователь может менять уровни других пользователей, если начальное и
конечное значение меньше его собственного уровня. Таким образом,
модераторы могут забанить/разбанить обычного пользователя, а администратор
еще и назначать модераторов.

alias пользователь может менять сам себе. Огранияения: 2-20 символов, цифры,
латинские буквы, '_'. Алиас не может совпадать с чужим алиасом (хотя есть
идея, что с помощью одного алиаса надо научиться связывать аккаунты одного
человека в разных соцсетях). При первом заходе пользователь получает
автоматически созданный алиас, содержащий символ "@", например slazav@lj

======================================================================

    Команды для работы с пользователями

    login (без параметров) -- войти (начать новую сессию)

В качестве секретной строчки передается токен loginza. По этому токену
запрашивается информация о пользователе. Если пользователя нет в
БД - он создается с уровнем LEVEL_NORM и автоматически созданным алиасом. Если
это первый пользователь в базе - его уровень выставляется в LEVEL_ADMIN.

Изменение пользователя:
- если пользователя нет в базе - он создается с автоматическим алиасом и
  уровнем LEVEL_NORM или LEVEL_ADMIN (если это первый пользователь).
- если пользователь существует - из старой записи используются только level и alias,
  остальное приходит из данных loginza
- создается новая сессия

Для успешного выполнения нужно: правильный ответ от loginza.
Возвращается: полная запись о пользователе.

----------------------
Во всех остальных командах в качестве секретной строчки используется id сессии
(или пустая строка для анонимного входа).


    logout (без параметров) -- выйти (удалить сессию)

Для успешного выполнения нужно: существующий в базе id сессии
Изменение пользователя: удаляется сессия, обновляется stime
Возвращается: запись об анонимном пользователе (довольно бессмысленная).


    my_info (без параметров) -- получить информацию о себе

Для успешного выполнения нужно: пустой или существующий в базе id сессии
Возвращается: полная запись о пользователе (если сессия существует)
              запись об анонимном пользователе (если id сессии пусто).


    set_alias new_alias -- поменять свой алиас

Для успешного выполнения нужно: 
 - существующий в базе id сессии
 - new_alias от 2 до 20 символов, латинские буквы, цифры, "_"
 - new_alias не совпадает с алиалом какого-либо еще пользователя
Возвращается: полная запись о пользователе.


    set_level id2 new_level -- поменять уровень другого пользователя

Для успешного выполнения нужно: 
 - существующий в базе id сессии для пользователя user1
 - существующий пользователь user2 с identity = id2
 - user1.level > user2.level
 - user1.level > new_level
 - LEVEL_ANON <= level <= LEVEL_ADMIN
Возвращается: запись о пользователе user2 без информации о сессии

    user_list (без параметров) -- получить список всех пользователей

Для успешного выполнения нужно: 
 - существующий в базе id сессии
 - уровень пользователя >= LEVEL_NORM
Возвращается: json-объект со всей базой данных, но без информации о сессиях.
  Кроме того, к информации о пользователях добавляются поля level_hints,
  которые содержат массивы уровней, которые запрашивающий пользователь
  способен установить.


======================================================================


    Подсистема файлохранилища -- не сделано 

Основной базе данных должно быть все равно, где лежит файл -
в хранилище или по внешнему url'у. Соответственно, к файлу можно
не привязывать информацию (?).

Операции:
- записать файл, перезаписать файл
- проверки ограничений

======================================================================

    Подсистема данных -- не сделано 




======================================================================
