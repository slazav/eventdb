Вторая попытка написать базу данных о походах на berkleydb.

======================================================================

    Архитектура

suid-программа, которая стоит на сервере и от моего имени выполняет разные
действия. Управляется перловым cgi-скриптом. Через аргументы ей
передается название команды и ее параметры. Затем на stdin - секретная
строчка (и, возможно, какие-то еще данные).
На stdout выдается результат в формате json. Информация хранится
в berkleydb (ключ - строка, значение - json).

TODO: такое надо бы, конечно, делать в виде сервера...

======================================================================

    Подсистема работы с пользователями.

Аутентификация происходит через сервис loginza.

БД пользователей:
  ключ - identity (например, http://slazav.livejournal.org),
  level - уровень доступа (banned, normal, moder, admin),
  alias - уникальный alias (например, slazav),
  abbr  - "короткий" alias (например, wz) для традиционных названий треков и т.п.

БД сессий:
  ключ     - секретный id,
  identity
  name
  время

Команда login (без параметров). В качестве секретной строчки передается токен
loginza. По этому токену запрашивается информация о пользователе. Если
пользователя нет в БД - он создается с уровнем normal и автоматически созданным
алиасом. Если это первый пользователь в базе - его уровень выставляется в admin.

Создается новая сессия, удаляются старые сессии этого пользователя. Возвращается
id сессии, identity, алиасы пользователя. Кидается запись в лог логинов.

Во всех остальных командах в качестве секретной строчки используется id сессии
(или пустая строка для анонимного входа с уровнем 0).
Все команды на выходе должны возвращать обратно id сессии, identity, алиасы пользователя.

Другие команды:
 - logout -- удалить свою сессию
 - ch_alias -- поменять алиас (себе - все уровни, чужому с уровнем меньше своего)
 - ch_aliass -- то же для "короткого" алиаса
 - ch_level - поменять уровень. Можно менять пользователя с уровнем меньше
              своего, нельзя выставлять уровень больше своего.

В качестве следующего шага - связывать несколько identity с помощью одного alias'а.

======================================================================

    Подсистема логгирования
- все операции записи должны дописываться в текстовый файл и в
 отдельную базу?
 уникальное время -> база - операция - пользователь - текст

======================================================================

    Подсистема файлохранилища

Основной базе данных должно быть все равно, где лежит файл -
в хранилище или по внешнему url'у. Соответственно, к файлу можно
не привязывать информацию (?).

Операции:
- записать файл, перезаписать файл
- проверки ограничений

======================================================================

    Подсистема данных

Все прочие базы данных устроены следующим образом:
  id -> key? + text

Операции:
- выдать text по id;
- создать/изменить запись
- выдать все тексты (с сортировкой и выборкой по key?)



======================================================================
